class WavatarComponent extends HTMLElement{shadow;image;canvas;context;scale;zoom;scaleMax;dragging;viewRect;imageOrigin;mouseOnCanvas;mouseOnImage;dragStart;offset;clipRound;constructor(){super();this.shadow=this.attachShadow({mode:'open'});this.image=new Image();this.image.addEventListener('load',this.imageChange.bind(this));this.scale=1;this.zoom=1;this.scaleMax=5;this.dragging=!1;this.viewRect={x:0,y:0,width:0,height:0};this.imageOrigin={x:0,y:0};this.mouseOnCanvas={x:0,y:0};this.mouseOnImage={x:0,y:0};this.dragStart={x:0,y:0};this.offset={x:0,y:0}}static get observedAttributes(){return['src','max','round']}get width(){return this.getAttribute('width')}set width(a){this.setAttribute('width',a)}get height(){return this.getAttribute('height')}set height(A){this.setAttribute('height',A)}get src(){return this.getAttribute('src')}set src(b){this.setAttribute('src',b)}get max(){return this.getAttribute('max')}set max(B){this.setAttribute('max',B)}get round(){return this.hasAttribute('round')}set round(){this.setAttribute('round','')}attributeChangedCallback(c,_,C){switch(c) {case 'src':this.image.src=C;break;case 'max':this.scaleMax=parseInt(C);break;default:break}}connectedCallback(){this.shadow.innerHTML=`
    <style>
      :host {
        display: inline-block;
        padding: 0;
        margin: 0;
        line-height: 0;
      }
    </style>
    <canvas></canvas>
    `;this.canvas=this.shadow.querySelector('canvas');this.context=this.canvas.getContext('2d');this.canvas.width=parseInt(this.getAttribute('width'))||200;this.canvas.height=parseInt(this.getAttribute('height'))||200;this.image.crossOrigin='anonymous';this.image.src=this.src;this.clipRound=()=>this.context.arc(this.canvas.width/2,this.canvas.height/2,this.canvas.height/2,0,2*Math.PI,!1);this.canvas.addEventListener('mousedown',e=>{this.dragging=!0;this.dragStart=this.getCanvasPoint(e);this.emit('mousedown')});this.canvas.addEventListener('mouseup',()=>{this.dragging=!1;this.imageOrigin.x=this.imageOrigin.x-this.offset.x;this.imageOrigin.y=this.imageOrigin.y-this.offset.y;this.offset={x:0,y:0};this.emit('mouseup');this.draw()});this.canvas.addEventListener('mousemove',e=>{this.mouseOnCanvas=this.getCanvasPoint(e);this.mouseOnImage.x=this.mouseOnCanvas.x/(this.scale*this.zoom)+this.viewRect.x;this.mouseOnImage.y=this.mouseOnCanvas.y/(this.scale*this.zoom)+this.viewRect.y;this.dragging&&(this.offset.x=(this.mouseOnCanvas.x-this.dragStart.x)/(this.scale*this.zoom),this.offset.y=(this.mouseOnCanvas.y-this.dragStart.y)/(this.scale*this.zoom),this.draw());this.emit('mousemove')});this.canvas.addEventListener('wheel',e=>{e.preventDefault();let _b=this.zoom+e.deltaY*-0.025;_b=Math.min(this.scaleMax,Math.max(1,_b));this.zoom=_b;this.emit('wheel');this.draw()},{passive:!1})}getCanvasPoint(e){let d=this.canvas.getBoundingClientRect();let x=e.clientX-d.x;let y=e.clientY-d.y;return{x,y}}clearCanvas(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}imageChange(){this.scale=Math.max(this.canvas.width/this.image.width,this.canvas.height/this.image.height);this.zoom=1;this.imageOrigin.x=this.image.width/2;this.imageOrigin.y=this.image.height/2;this.emit('src');this.draw()}draw(){this.calculateViewRect();this.clearCanvas();this.context.save();this.round&&(this.clipRound(),this.context.clip());this.context.drawImage(this.image,this.viewRect.x,this.viewRect.y,this.viewRect.width,this.viewRect.height,0,0,this.canvas.width,this.canvas.height);this.context.restore();this.emit('draw')}calculateViewRect(){let _a=this.scale*this.zoom;this.viewRect.width=this.canvas.width/_a;this.viewRect.height=this.canvas.height/_a;this.viewRect.x=this.imageOrigin.x-this.offset.x-this.viewRect.width/2;this.viewRect.y=this.imageOrigin.y-this.offset.y-this.viewRect.height/2;this.checkViewRectBounds()}checkViewRectBounds(){if(this.imageOrigin.x-this.offset.x-this.viewRect.width/2<0){let D=this.imageOrigin.x-this.offset.x-this.viewRect.width/2;this.viewRect.x=this.viewRect.x-D;this.imageOrigin.x=this.viewRect.width/2}if(this.image.width<this.imageOrigin.x-this.offset.x+this.viewRect.width/2){let _A=this.image.width-(this.imageOrigin.x-this.offset.x+this.viewRect.width/2);this.viewRect.x=this.viewRect.x+_A;this.imageOrigin.x=this.image.width-this.viewRect.width/2}if(this.imageOrigin.y-this.offset.y-this.viewRect.height/2<0){let E=this.imageOrigin.y-this.offset.y-this.viewRect.height/2;this.viewRect.y=this.viewRect.y-E;this.imageOrigin.y=this.viewRect.height/2}if(this.image.height<this.imageOrigin.y-this.offset.y+this.viewRect.height/2){let aA=this.image.height-(this.imageOrigin.y-this.offset.y+this.viewRect.height/2);this.viewRect.y=this.viewRect.y+aA;this.imageOrigin.y=this.image.height-this.viewRect.height/2}}debugInfo(){return{canvas:{width:this.canvas.width,height:this.canvas.height},image:{src:this.image.src,width:this.image.width,height:this.image.height},viewRect:this.viewRect,scale:this.scale,zoom:this.zoom,mouseOnCanvas:this.mouseOnCanvas,mouseOnImage:this.mouseOnImage,round:this.round}}debug(){return this.debugInfo()}emit(aB){let _B=this.debugInfo();window.dispatchEvent(new CustomEvent('wavatar-debug', {detail:{..._B,event:aB}}))}fileSelect(aC){let aD=document.createElement('input');aD.type='file';aD.addEventListener('change',e=>{this.src=URL.createObjectURL(e.target.files[0]);aC?.()});aD.click();aD.remove()}setZoom(aE){this.zoom=Math.min(Math.max(aE,1),this.scaleMax)}toPNG(){return this.canvas.toDataURL('image/png')}toJPEG(){return this.canvas.toDataURL('image/jpeg')}toBlob(aF){this.canvas.toBlob(aG=>aF(aG))}}window.customElements.define('w-avatar',WavatarComponent);
